services:
  # Servicio de Usuarios
  users-service:
    build:
      context: ./services/users
      dockerfile: Dockerfile
    ports:
      - "${USERS_SERVICE_PORT}:${USERS_SERVICE_PORT}"
    environment:
      - PORT=${USERS_SERVICE_PORT}
      - NODE_ENV=${NODE_ENV}
      - KAFKA_BROKERS=kafka:${KAFKA_PORT}
      - KAFKA_CLIENT_ID=${USERS_KAFKA_CLIENT_ID}
      - DB_HOST=${USERS_DB_HOST}
      - DB_PORT=${USERS_DB_PORT}
      - DB_NAME=${USERS_DB_NAME}
    depends_on:
      - kafka
    networks:
      - microservices-network
    volumes:
      - ./services/users:/app
      - /app/node_modules
    restart: unless-stopped

  # Servicio de Notificaciones
  notifications-service:
    build:
      context: ./services/notifications
      dockerfile: Dockerfile
    ports:
      - "${NOTIFICATIONS_SERVICE_PORT}:${NOTIFICATIONS_SERVICE_PORT}"
    environment:
      - PORT=${NOTIFICATIONS_SERVICE_PORT}
      - NODE_ENV=${NODE_ENV}
      - KAFKA_BROKERS=kafka:${KAFKA_PORT}
      - KAFKA_CLIENT_ID=${NOTIFICATIONS_KAFKA_CLIENT_ID}
      - DB_HOST=${NOTIFICATIONS_DB_HOST}
      - DB_PORT=${NOTIFICATIONS_DB_PORT}
      - DB_NAME=${NOTIFICATIONS_DB_NAME}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    depends_on:
      - kafka
    networks:
      - microservices-network
    volumes:
      - ./services/notifications:/app
      - /app/node_modules
    restart: unless-stopped

  # Zookeeper (requerido por Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    networks:
      - microservices-network
    restart: unless-stopped

  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: '${KAFKA_AUTO_CREATE_TOPICS_ENABLE}'
    networks:
      - microservices-network
    restart: unless-stopped

  # API Gateway (Nginx)
  api-gateway:
    image: nginx:alpine
    ports:
      - "${GATEWAY_PORT}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - users-service
      - notifications-service
    networks:
      - microservices-network
    restart: unless-stopped

networks:
  microservices-network:
    driver: bridge

volumes:
  kafka-data:
