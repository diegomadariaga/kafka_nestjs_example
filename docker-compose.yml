services:
  # Servicio de Usuarios
  users-service:
    build:
      context: ./services/users
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - NODE_ENV=development
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=users-service
    depends_on:
      - kafka
    networks:
      - microservices-network
    volumes:
      - ./services/users:/app
      - /app/node_modules
    restart: unless-stopped

  # Servicio de Notificaciones
  notifications-service:
    build:
      context: ./services/notifications
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - NODE_ENV=development
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=notifications-service
    depends_on:
      - kafka
    networks:
      - microservices-network
    volumes:
      - ./services/notifications:/app
      - /app/node_modules
    restart: unless-stopped

  # Zookeeper (requerido por Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-network
    restart: unless-stopped

  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - microservices-network
    restart: unless-stopped

  # API Gateway (Nginx)
  api-gateway:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - users-service
      - notifications-service
    networks:
      - microservices-network
    restart: unless-stopped

networks:
  microservices-network:
    driver: bridge

volumes:
  kafka-data:
